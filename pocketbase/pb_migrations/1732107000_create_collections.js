migrate(
  (db) => {
    const dao = new Dao(db);

    // ÂàõÂª∫ notes collection
    const notes = new Collection({
      id: "notes",
      name: "notes",
      type: "base",
      schema: [
        {
          name: "text",
          type: "editor",
          required: false,
        },
        {
          name: "created_by",
          type: "relation",
          required: true,
          options: {
            maxSelect: 1,
            collectionId: "_pb_users_auth_",
            cascadeDelete: true,
          },
        },
      ],
      listRule: '@request.auth.id != "" && created_by ~ @request.auth.id',
      viewRule: '@request.auth.id != "" && created_by ~ @request.auth.id',
      createRule: '@request.auth.id != ""',
      updateRule: '@request.auth.id != "" && created_by ~ @request.auth.id',
      deleteRule: '@request.auth.id != "" && created_by ~ @request.auth.id',
    });

    const files = new Collection({
      id: "files",
      name: "files",
      type: "base",
      schema: [
        {
          name: "file",
          type: "file",
          required: true,
          options: {
            maxSelect: 1,
            maxSize: 1024 * 1024 * 500, //  Âçï‰∏™Êñá‰ª∂ÊúÄÂ§ß 500 MB
          },
        },
        {
          name: "note",
          type: "relation",
          required: false, // ÂÖÅËÆ∏ÂÖà‰∏ä‰º†Êñá‰ª∂,ÂêéÂÖ≥ËÅîÁ¨îËÆ∞
          options: {
            maxSelect: 1,
            collectionId: "notes",
            cascadeDelete: true, // Âà†Èô§ note Êó∂Ëá™Âä®Âà†Èô§ÂÖ≥ËÅî file
          },
        },
        {
          name: "created_by",
          type: "relation",
          required: true,
          options: {
            maxSelect: 1,
            collectionId: "_pb_users_auth_",
            cascadeDelete: true,
          },
        },
      ],
      listRule: '@request.auth.id != "" && created_by ~ @request.auth.id',
      viewRule: '@request.auth.id != "" && created_by ~ @request.auth.id',
      createRule: '@request.auth.id != ""',
      updateRule: '@request.auth.id != "" && created_by ~ @request.auth.id',
      deleteRule: '@request.auth.id != "" && created_by ~ @request.auth.id',
    });

    console.log("üê• files ÂàõÂª∫");
    dao.saveCollection(files);

    console.log("üê• notes ÂàõÂª∫");
    return dao.saveCollection(notes);
  },
  (db) => {
    const dao = new Dao(db);

    const notesCollection = dao.findCollectionByNameOrId("notes");
    if (notesCollection) {
      dao.deleteCollection("notes");
      console.log("üê• notes collection Â∑≤Âà†Èô§");
    }

    const filesCollection = dao.findCollectionByNameOrId("files");
    if (filesCollection) {
      dao.deleteCollection("files");
      console.log("üê• files collection Â∑≤Âà†Èô§");
    }
  }
);
